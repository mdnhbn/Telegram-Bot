from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from config import Config
from database import Database

db = Database()

async def admin_wallet_management(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    settings = db.get_all_settings()
    
    text = (
        "ЁЯТ░ ржУржпрж╝рж╛рж▓рзЗржЯ ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛:\n\n"
        f"ЁЯУ▒ ржмрж┐ржХрж╛рж╢ рж╕ржХрзНрж░рж┐ржпрж╝: {'тЬЕ' if settings.get('BKASH_ENABLED', '0') == '1' else 'тЭМ'}\n"
        f"ЁЯУЮ ржмрж┐ржХрж╛рж╢ ржиржорзНржмрж░: {settings.get('BKASH_MERCHANT_NO', 'рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗ')}\n\n"
        f"ЁЯкЩ ржХрзНрж░рж┐ржкрзНржЯрзЛ рж╕ржХрзНрж░рж┐ржпрж╝: {'тЬЕ' if settings.get('CRYPTO_ENABLED', '0') == '1' else 'тЭМ'}\n"
        f"ЁЯТ│ USDT (TRC20): {settings.get('USDT_TRC20_WALLET', 'рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗ')}\n"
        f"тЪб TON: {settings.get('TON_WALLET', 'рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗ')}\n"
        f"ЁЯРХ DOGE: {settings.get('DOGE_WALLET', 'рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗ')}\n\n"
        "ржХрзЛржи рж╕рзЗржЯрж┐ржВ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рждрзЗ ржЪрж╛ржи?"
    )
    
    keyboard = [
        [InlineKeyboardButton("ЁЯУ▒ ржмрж┐ржХрж╛рж╢ рж╕ржХрзНрж░рж┐ржпрж╝/ржирж┐рж╖рзНржХрзНрж░рж┐ржпрж╝", callback_data="admin_toggle_bkash")],
        [InlineKeyboardButton("ЁЯУЮ ржмрж┐ржХрж╛рж╢ ржиржорзНржмрж░ ржкрж░рж┐ржмрж░рзНрждржи", callback_data="admin_set_bkash_no")],
        [InlineKeyboardButton("ЁЯкЩ ржХрзНрж░рж┐ржкрзНржЯрзЛ рж╕ржХрзНрж░рж┐ржпрж╝/ржирж┐рж╖рзНржХрзНрж░рж┐ржпрж╝", callback_data="admin_toggle_crypto")],
        [InlineKeyboardButton("ЁЯТ│ USDT ржУржпрж╝рж╛рж▓рзЗржЯ ржкрж░рж┐ржмрж░рзНрждржи", callback_data="admin_set_usdt_wallet")],
        [InlineKeyboardButton("тЪб TON ржУржпрж╝рж╛рж▓рзЗржЯ ржкрж░рж┐ржмрж░рзНрждржи", callback_data="admin_set_ton_wallet")],
        [InlineKeyboardButton("ЁЯРХ DOGE ржУржпрж╝рж╛рж▓рзЗржЯ ржкрж░рж┐ржмрж░рзНрждржи", callback_data="admin_set_doge_wallet")],
        [InlineKeyboardButton("ЁЯФЩ ржЕрзНржпрж╛ржбржорж┐ржи ржорзЗржирзБ", callback_data="admin_menu")]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def admin_toggle_bkash(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    current = db.get_setting('BKASH_ENABLED')
    new_value = '0' if current == '1' else '1'
    db.update_setting('BKASH_ENABLED', new_value)
    
    await query.edit_message_text(
        f"ржмрж┐ржХрж╛рж╢ ржкрзЗржорзЗржирзНржЯ ржкржжрзНржзрждрж┐ ржПржЦржи {'рж╕ржХрзНрж░рж┐ржпрж╝ тЬЕ' if new_value == '1' else 'ржирж┐рж╖рзНржХрзНрж░рж┐ржпрж╝ тЭМ'} ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯФЩ ржУржпрж╝рж╛рж▓рзЗржЯ ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛", callback_data="admin_wallet_management")]
        ])
    )

async def admin_set_bkash_no(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        f"ржмрж░рзНрждржорж╛ржи ржмрж┐ржХрж╛рж╢ ржорж╛рж░рзНржЪрзЗржирзНржЯ ржиржорзНржмрж░: {db.get_setting('BKASH_MERCHANT_NO')}\n\n"
        "ржирждрзБржи ржмрж┐ржХрж╛рж╢ ржорж╛рж░рзНржЪрзЗржирзНржЯ ржиржорзНржмрж░ рж▓рж┐ржЦрзБржи:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯФЩ ржмрж╛рждрж┐рж▓ ржХрж░рзБржи", callback_data="admin_wallet_management")]
        ])
    )
    context.user_data['admin_action'] = 'set_bkash_no'

async def admin_toggle_crypto(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    current = db.get_setting('CRYPTO_ENABLED')
    new_value = '0' if current == '1' else '1'
    db.update_setting('CRYPTO_ENABLED', new_value)
    
    await query.edit_message_text(
        f"ржХрзНрж░рж┐ржкрзНржЯрзЛ ржкрзЗржорзЗржирзНржЯ ржкржжрзНржзрждрж┐ ржПржЦржи {'рж╕ржХрзНрж░рж┐ржпрж╝ тЬЕ' if new_value == '1' else 'ржирж┐рж╖рзНржХрзНрж░рж┐ржпрж╝ тЭМ'} ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯФЩ ржУржпрж╝рж╛рж▓рзЗржЯ ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛", callback_data="admin_wallet_management")]
        ])
    )

async def admin_set_usdt_wallet(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        f"ржмрж░рзНрждржорж╛ржи USDT (TRC20) ржУржпрж╝рж╛рж▓рзЗржЯ: {db.get_setting('USDT_TRC20_WALLET')}\n\n"
        "ржирждрзБржи USDT (TRC20) ржУржпрж╝рж╛рж▓рзЗржЯ ржарж┐ржХрж╛ржирж╛ рж▓рж┐ржЦрзБржи:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯФЩ ржмрж╛рждрж┐рж▓ ржХрж░рзБржи", callback_data="admin_wallet_management")]
        ])
    )
    context.user_data['admin_action'] = 'set_usdt_wallet'

async def admin_set_ton_wallet(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        f"ржмрж░рзНрждржорж╛ржи TON ржУржпрж╝рж╛рж▓рзЗржЯ: {db.get_setting('TON_WALLET')}\n\n"
        "ржирждрзБржи TON ржУржпрж╝рж╛рж▓рзЗржЯ ржарж┐ржХрж╛ржирж╛ рж▓рж┐ржЦрзБржи:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯФЩ ржмрж╛рждрж┐рж▓ ржХрж░рзБржи", callback_data="admin_wallet_management")]
        ])
    )
    context.user_data['admin_action'] = 'set_ton_wallet'

async def admin_set_doge_wallet(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        f"ржмрж░рзНрждржорж╛ржи DOGE ржУржпрж╝рж╛рж▓рзЗржЯ: {db.get_setting('DOGE_WALLET')}\n\n"
        "ржирждрзБржи DOGE ржУржпрж╝рж╛рж▓рзЗржЯ ржарж┐ржХрж╛ржирж╛ рж▓рж┐ржЦрзБржи:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯФЩ ржмрж╛рждрж┐рж▓ ржХрж░рзБржи", callback_data="admin_wallet_management")]
        ])
    )
    context.user_data['admin_action'] = 'set_doge_wallet'

async def admin_process_wallet_settings(update: Update, context: CallbackContext):
    message = update.message
    admin_action = context.user_data.get('admin_action')
    
    if not admin_action:
        return
    
    new_value = message.text.strip()
    
    if admin_action == 'set_bkash_no':
        db.update_setting('BKASH_MERCHANT_NO', new_value)
        await message.reply_text(f"ржмрж┐ржХрж╛рж╢ ржорж╛рж░рзНржЪрзЗржирзНржЯ ржиржорзНржмрж░ ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ: {new_value}")
    
    elif admin_action == 'set_usdt_wallet':
        db.update_setting('USDT_TRC20_WALLET', new_value)
        await message.reply_text(f"USDT (TRC20) ржУржпрж╝рж╛рж▓рзЗржЯ ржарж┐ржХрж╛ржирж╛ ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ: {new_value}")
    
    elif admin_action == 'set_ton_wallet':
        db.update_setting('TON_WALLET', new_value)
        await message.reply_text(f"TON ржУржпрж╝рж╛рж▓рзЗржЯ ржарж┐ржХрж╛ржирж╛ ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ: {new_value}")
    
    elif admin_action == 'set_doge_wallet':
        db.update_setting('DOGE_WALLET', new_value)
        await message.reply_text(f"DOGE ржУржпрж╝рж╛рж▓рзЗржЯ ржарж┐ржХрж╛ржирж╛ ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ: {new_value}")
    
    del context.user_data['admin_action']
    await admin_wallet_management(update, context)

async def admin_deposit_management(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    pending_deposits = db.get_pending_deposits()
    pending_count = len(pending_deposits) if pending_deposits else 0
    
    keyboard = [
        [InlineKeyboardButton(f"тП│ ржкрзЗржирзНржбрж┐ржВ ржбрж┐ржкрзЛржЬрж┐ржЯ ({pending_count})", callback_data="admin_pending_deposits")],
        [InlineKeyboardButton("ЁЯФЩ ржЕрзНржпрж╛ржбржорж┐ржи ржорзЗржирзБ", callback_data="admin_menu")]
    ]
    
    await query.edit_message_text(
        "ржбрж┐ржкрзЛржЬрж┐ржЯ ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def admin_pending_deposits(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    deposits = db.get_pending_deposits()
    if not deposits:
        await query.edit_message_text(
            "ржХрзЛржи ржкрзЗржирзНржбрж┐ржВ ржбрж┐ржкрзЛржЬрж┐ржЯ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("ЁЯФЩ ржбрж┐ржкрзЛржЬрж┐ржЯ ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛", callback_data="admin_deposit_management")]
            ])
        )
        return
    
    text = "тП│ ржкрзЗржирзНржбрж┐ржВ ржбрж┐ржкрзЛржЬрж┐ржЯрзЗрж░ рждрж╛рж▓рж┐ржХрж╛:\n\n"
    for deposit in deposits[:10]:  # ржкрзНрж░ржержо рззрзжржЯрж┐ ржжрзЗржЦрж╛ржУ
        user = db.get_user(deposit[1])
        username = f"@{user[1]}" if user and user[1] else f"User {deposit[1]}"
        
        method = deposit[3]
        if method == 'bkash':
            method_text = "ЁЯУ▒ ржмрж┐ржХрж╛рж╢"
        elif method == 'crypto_usdt':
            method_text = "ЁЯТ│ USDT"
        elif method == 'crypto_ton':
            method_text = "тЪб TON"
        elif method == 'crypto_doge':
            method_text = "ЁЯРХ DOGE"
        else:
            method_text = method
        
        text += (
            f"ЁЯЖФ {deposit[0]}\n"
            f"ЁЯСд {username}\n"
            f"ЁЯУМ ржкржжрзНржзрждрж┐: {method_text}\n"
            f"ЁЯТ░ ржкрж░рж┐ржорж╛ржг: {deposit[2]:.2f} ржкржпрж╝рзЗржирзНржЯ\n"
            f"ЁЯУЕ рждрж╛рж░рж┐ржЦ: {deposit[6]}\n\n"
        )
    
    keyboard = []
    
    # ржкрзНрж░рждрж┐ржЯрж┐ ржбрж┐ржкрзЛржЬрж┐ржЯрзЗрж░ ржЬржирзНржп ржЕржирзБржорзЛржжржи/ржмрж╛рждрж┐рж▓ ржмрж╛ржЯржи
    for deposit in deposits[:5]:  # ржкрзНрж░ржержо рзлржЯрж┐рж░ ржЬржирзНржп ржмрж╛ржЯржи ржжрзЗржЦрж╛ржУ
        keyboard.append([
            InlineKeyboardButton(f"тЬЕ {deposit[0]}", callback_data=f"approve_deposit_{deposit[0]}"),
            InlineKeyboardButton(f"тЭМ {deposit[0]}", callback_data=f"reject_deposit_{deposit[0]}")
        ])
    
    keyboard.append([InlineKeyboardButton("ЁЯФЩ ржбрж┐ржкрзЛржЬрж┐ржЯ ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛", callback_data="admin_deposit_management")])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def admin_approve_deposit(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    deposit_id = query.data.replace("approve_deposit_", "")
    deposit = db.get_deposit(deposit_id)
    
    if not deposit:
        await query.edit_message_text("ржбрж┐ржкрзЛржЬрж┐ржЯ ржЖржЗржбрж┐ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")
        return
    
    db.update_deposit_status(deposit_id, 'completed')
    
    user = db.get_user(deposit[1])
    if user:
        try:
            await context.bot.send_message(
                chat_id=deposit[1],
                text=f"тЬЕ ржЖржкржирж╛рж░ ржбрж┐ржкрзЛржЬрж┐ржЯ ржЕржирзБрж░рзЛржз #{deposit_id} ржЕржирзБржорзЛржжржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред "
                     f"{deposit[2]:.2f} ржкржпрж╝рзЗржирзНржЯ ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ ржпрзЛржЧ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред"
            )
        except:
            pass
    
    await query.edit_message_text(
        f"ржбрж┐ржкрзЛржЬрж┐ржЯ #{deposit_id} ржЕржирзБржорзЛржжржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ {deposit[2]:.2f} ржкржпрж╝рзЗржирзНржЯ ржпрзЛржЧ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯФЩ ржкрзЗржирзНржбрж┐ржВ ржбрж┐ржкрзЛржЬрж┐ржЯ", callback_data="admin_pending_deposits")]
        ])
    )

async def admin_reject_deposit(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    deposit_id = query.data.replace("reject_deposit_", "")
    deposit = db.get_deposit(deposit_id)
    
    if not deposit:
        await query.edit_message_text("ржбрж┐ржкрзЛржЬрж┐ржЯ ржЖржЗржбрж┐ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")
        return
    
    db.update_deposit_status(deposit_id, 'rejected')
    
    user = db.get_user(deposit[1])
    if user:
        try:
            await context.bot.send_message(
                chat_id=deposit[1],
                text=f"тЭМ ржЖржкржирж╛рж░ ржбрж┐ржкрзЛржЬрж┐ржЯ ржЕржирзБрж░рзЛржз #{deposit_id} ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред "
                     "ржЖрж░ржУ рждржерзНржпрзЗрж░ ржЬржирзНржп рж╕рж╛рж╣рж╛ржпрзНржп ржХрзЗржирзНржжрзНрж░рзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред"
            )
        except:
            pass
    
    await query.edit_message_text(
        f"ржбрж┐ржкрзЛржЬрж┐ржЯ #{deposit_id} ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯФЩ ржкрзЗржирзНржбрж┐ржВ ржбрж┐ржкрзЛржЬрж┐ржЯ", callback_data="admin_pending_deposits")]
        ])
    )

# рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржи ржлрж╛ржВрж╢ржирзЗ ржирждрзБржи рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржпрзЛржЧ ржХрж░рзБржи
def register_admin_handlers(application):
    # ржкрзВрж░рзНржмрзЗрж░ рж╕ржорж╕рзНржд рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
    # ...
    
    # ржирждрзБржи ржУржпрж╝рж╛рж▓рзЗржЯ ржПржмржВ ржбрж┐ржкрзЛржЬрж┐ржЯ ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
    application.add_handler(CallbackQueryHandler(admin_wallet_management, pattern="^admin_wallet_management$"))
    application.add_handler(CallbackQueryHandler(admin_toggle_bkash, pattern="^admin_toggle_bkash$"))
    application.add_handler(CallbackQueryHandler(admin_set_bkash_no, pattern="^admin_set_bkash_no$"))
    application.add_handler(CallbackQueryHandler(admin_toggle_crypto, pattern="^admin_toggle_crypto$"))
    application.add_handler(CallbackQueryHandler(admin_set_usdt_wallet, pattern="^admin_set_usdt_wallet$"))
    application.add_handler(CallbackQueryHandler(admin_set_ton_wallet, pattern="^admin_set_ton_wallet$"))
    application.add_handler(CallbackQueryHandler(admin_set_doge_wallet, pattern="^admin_set_doge_wallet$"))
    
    application.add_handler(CallbackQueryHandler(admin_deposit_management, pattern="^admin_deposit_management$"))
    application.add_handler(CallbackQueryHandler(admin_pending_deposits, pattern="^admin_pending_deposits$"))
    application.add_handler(CallbackQueryHandler(admin_approve_deposit, pattern="^approve_deposit_"))
    application.add_handler(CallbackQueryHandler(admin_reject_deposit, pattern="^reject_deposit_"))
    
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, admin_process_wallet_settings))
    
    # ржкрзВрж░рзНржмрзЗрж░ рж╕ржорж╕рзНржд рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
    # ...
