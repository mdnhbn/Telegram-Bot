from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from config import Config
from database import Database
import random
import string

db = Database()

# рж╣рзЗрж▓рзНржкрж╛рж░ ржлрж╛ржВрж╢ржи
def generate_random_string(length=8):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

async def admin_menu(update: Update, context: CallbackContext):
    user = update.effective_user
    if user.id not in Config.ADMIN_IDS:
        await update.message.reply_text("ржЖржкржирж┐ ржЕрзНржпрж╛ржбржорж┐ржи ржиржиред")
        return
    
    keyboard = [
        [InlineKeyboardButton("ЁЯСе ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛", callback_data="admin_user_management")],
        [InlineKeyboardButton("ЁЯУЭ ржЯрж╛рж╕рзНржХ ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛", callback_data="admin_task_management")],
        [InlineKeyboardButton("ЁЯУв ржмрж┐ржЬрзНржЮрж╛ржкржи ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛", callback_data="admin_ad_management")],
        [InlineKeyboardButton("ЁЯТ░ ржЖрж░рзНржерж┐ржХ ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛", callback_data="admin_financial_management")],
        [InlineKeyboardButton("тЪЩя╕П рж╕рзЗржЯрж┐ржВрж╕", callback_data="admin_settings")],
        [InlineKeyboardButton("ЁЯУв ржмрзНрж░ржбржХрж╛рж╕рзНржЯ", callback_data="admin_broadcast")]
    ]
    
    await update.message.reply_text(
        "ржЕрзНржпрж╛ржбржорж┐ржи ржкрзНржпрж╛ржирзЗрж▓:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def admin_user_management(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("ЁЯФН ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржЦрзБржБржЬрзБржи", callback_data="admin_find_user")],
        [InlineKeyboardButton("ЁЯЪл ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржмрзНржпрж╛ржи ржХрж░рзБржи", callback_data="admin_ban_user")],
        [InlineKeyboardButton("тЬЕ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржЖржиржмрж╛ржи ржХрж░рзБржи", callback_data="admin_unban_user")],
        [InlineKeyboardButton("тЮХ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржпрзЛржЧ ржХрж░рзБржи", callback_data="admin_add_balance")],
        [InlineKeyboardButton("тЮЦ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржХржорж╛ржи", callback_data="admin_deduct_balance")],
        [InlineKeyboardButton("ЁЯФЩ ржЕрзНржпрж╛ржбржорж┐ржи ржорзЗржирзБ", callback_data="admin_menu")]
    ]
    
    await query.edit_message_text(
        "ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def admin_find_user(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржЗржЙржЬрж╛рж░ржирзЗржо ржмрж╛ ржЖржЗржбрж┐ рж▓рж┐ржЦрзБржи:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯФЩ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛", callback_data="admin_user_management")]
        ])
    )
    context.user_data['admin_action'] = 'find_user'

async def admin_process_find_user(update: Update, context: CallbackContext):
    message = update.message
    search_term = message.text.strip()
    
    try:
        # ржЗржЙржЬрж╛рж░ржирзЗржо ржмрж╛ ржЖржЗржбрж┐ ржжрзНржмрж╛рж░рж╛ ржЦрзБржБржЬрзБржи
        if search_term.startswith('@'):
            search_term = search_term[1:]
            user = db.conn.execute('SELECT * FROM users WHERE username = ?', (search_term,)).fetchone()
        else:
            user_id = int(search_term)
            user = db.get_user(user_id)
        
        if user:
            text = (
                f"ЁЯСд ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА рждржерзНржп:\n\n"
                f"ЁЯЖФ ржЖржЗржбрж┐: {user[0]}\n"
                f"ЁЯСд ржирж╛ржо: {user[2]} {user[3] or ''}\n"
                f"ЁЯУЫ ржЗржЙржЬрж╛рж░ржирзЗржо: @{user[1] or 'N/A'}\n"
                f"ЁЯУЕ ржпрзЛржЧржжрж╛ржи рждрж╛рж░рж┐ржЦ: {user[4]}\n"
                f"ЁЯТ░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {user[7]:.2f} ржкржпрж╝рзЗржирзНржЯ\n"
                f"ЁЯТ╡ ржорзЛржЯ ржЖржпрж╝: {user[8]:.2f} ржкржпрж╝рзЗржирзНржЯ\n"
                f"ЁЯСе рж░рзЗржлрж╛рж░рзЗрж▓: {user[9]} ржЬржи\n"
                f"ЁЯФТ ржЕржмрж╕рзНржерж╛: {'ржмрзНржпрж╛ржи' if user[12] else 'рж╕ржХрзНрж░рж┐ржпрж╝'}\n"
                f"тЬЕ ржнрзЗрж░рж┐ржлрж╛ржЗржб: {'рж╣рзНржпрж╛ржБ' if user[11] else 'ржирж╛'}"
            )
            
            keyboard = [
                [InlineKeyboardButton("тЮХ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржпрзЛржЧ", callback_data=f"admin_add_bal_{user[0]}")],
                [InlineKeyboardButton("тЮЦ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржХржорж╛ржи", callback_data=f"admin_deduct_bal_{user[0]}")],
                [InlineKeyboardButton("ЁЯЪл ржмрзНржпрж╛ржи ржХрж░рзБржи", callback_data=f"admin_ban_{user[0]}")] if not user[12] else 
                [InlineKeyboardButton("тЬЕ ржЖржиржмрж╛ржи ржХрж░рзБржи", callback_data=f"admin_unban_{user[0]}")],
                [InlineKeyboardButton("ЁЯФЩ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛", callback_data="admin_user_management")]
            ]
            
            await message.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard)
        else:
            await message.reply_text("ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")
    except ValueError:
        await message.reply_text("ржЕржмрзИржз ржЗржиржкрзБржЯред ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж┐ ржмрзИржз ржЗржЙржЬрж╛рж░ржирзЗржо ржмрж╛ ржЖржЗржбрж┐ рж▓рж┐ржЦрзБржиред")

async def admin_ban_user(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith('admin_ban_'):
        user_id = int(query.data.replace('admin_ban_', ''))
        db.ban_user(user_id)
        await query.edit_message_text(f"ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА {user_id} ржХрзЗ ржмрзНржпрж╛ржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")
        return
    
    await query.edit_message_text(
        "ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржЗржЙржЬрж╛рж░ржирзЗржо ржмрж╛ ржЖржЗржбрж┐ рж▓рж┐ржЦрзБржи ржпрж╛ржХрзЗ ржмрзНржпрж╛ржи ржХрж░рждрзЗ ржЪрж╛ржи:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯФЩ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛", callback_data="admin_user_management")]
        ])
    )
    context.user_data['admin_action'] = 'ban_user'

async def admin_unban_user(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith('admin_unban_'):
        user_id = int(query.data.replace('admin_unban_', ''))
        db.unban_user(user_id)
        await query.edit_message_text(f"ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА {user_id} ржХрзЗ ржЖржиржмрж╛ржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")
        return
    
    await query.edit_message_text(
        "ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржЗржЙржЬрж╛рж░ржирзЗржо ржмрж╛ ржЖржЗржбрж┐ рж▓рж┐ржЦрзБржи ржпрж╛ржХрзЗ ржЖржиржмрж╛ржи ржХрж░рждрзЗ ржЪрж╛ржи:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯФЩ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛", callback_data="admin_user_management")]
        ])
    )
    context.user_data['admin_action'] = 'unban_user'

async def admin_add_balance(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith('admin_add_bal_'):
        user_id = int(query.data.replace('admin_add_bal_', ''))
        context.user_data['admin_user_id'] = user_id
        context.user_data['admin_action'] = 'add_balance'
        
        await query.edit_message_text(
            f"ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА {user_id}-ржПрж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ ржпрзЛржЧ ржХрж░рждрзЗ ржЪрж╛ржи ржПржоржи ржкржпрж╝рзЗржирзНржЯрзЗрж░ ржкрж░рж┐ржорж╛ржг рж▓рж┐ржЦрзБржи:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("ЁЯФЩ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛", callback_data="admin_user_management")]
            ])
        )
        return
    
    await query.edit_message_text(
        "ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржЗржЙржЬрж╛рж░ржирзЗржо ржмрж╛ ржЖржЗржбрж┐ рж▓рж┐ржЦрзБржи ржпрж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ ржкржпрж╝рзЗржирзНржЯ ржпрзЛржЧ ржХрж░рждрзЗ ржЪрж╛ржи:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯФЩ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛", callback_data="admin_user_management")]
        ])
    )
    context.user_data['admin_action'] = 'add_balance_user'

async def admin_deduct_balance(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith('admin_deduct_bal_'):
        user_id = int(query.data.replace('admin_deduct_bal_', ''))
        context.user_data['admin_user_id'] = user_id
        context.user_data['admin_action'] = 'deduct_balance'
        
        await query.edit_message_text(
            f"ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА {user_id}-ржПрж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржерзЗржХрзЗ ржХржорж╛ржирзЛрж░ ржЬржирзНржп ржкржпрж╝рзЗржирзНржЯрзЗрж░ ржкрж░рж┐ржорж╛ржг рж▓рж┐ржЦрзБржи:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("ЁЯФЩ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛", callback_data="admin_user_management")]
            ])
        )
        return
    
    await query.edit_message_text(
        "ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржЗржЙржЬрж╛рж░ржирзЗржо ржмрж╛ ржЖржЗржбрж┐ рж▓рж┐ржЦрзБржи ржпрж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржерзЗржХрзЗ ржкржпрж╝рзЗржирзНржЯ ржХржорж╛ржирзЛ рж╣ржмрзЗ:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯФЩ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛", callback_data="admin_user_management")]
        ])
    )
    context.user_data['admin_action'] = 'deduct_balance_user'

async def admin_process_balance_action(update: Update, context: CallbackContext):
    message = update.message
    admin_action = context.user_data.get('admin_action')
    
    if admin_action in ('add_balance_user', 'deduct_balance_user'):
        search_term = message.text.strip()
        try:
            if search_term.startswith('@'):
                search_term = search_term[1:]
                user = db.conn.execute('SELECT * FROM users WHERE username = ?', (search_term,)).fetchone()
            else:
                user_id = int(search_term)
                user = db.get_user(user_id)
            
            if user:
                context.user_data['admin_user_id'] = user[0]
                if admin_action == 'add_balance_user':
                    context.user_data['admin_action'] = 'add_balance'
                    await message.reply_text(
                        f"ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА {user[0]}-ржПрж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ ржпрзЛржЧ ржХрж░рждрзЗ ржЪрж╛ржи ржПржоржи ржкржпрж╝рзЗржирзНржЯрзЗрж░ ржкрж░рж┐ржорж╛ржг рж▓рж┐ржЦрзБржи:",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("ЁЯФЩ ржмрж╛рждрж┐рж▓ ржХрж░рзБржи", callback_data="admin_user_management")]
                        ])
                    )
                else:
                    context.user_data['admin_action'] = 'deduct_balance'
                    await message.reply_text(
                        f"ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА {user[0]}-ржПрж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржерзЗржХрзЗ ржХржорж╛ржирзЛрж░ ржЬржирзНржп ржкржпрж╝рзЗржирзНржЯрзЗрж░ ржкрж░рж┐ржорж╛ржг рж▓рж┐ржЦрзБржи:",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("ЁЯФЩ ржмрж╛рждрж┐рж▓ ржХрж░рзБржи", callback_data="admin_user_management")]
                        ])
                    )
            else:
                await message.reply_text("ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")
        except ValueError:
            await message.reply_text("ржЕржмрзИржз ржЗржиржкрзБржЯред ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж┐ ржмрзИржз ржЗржЙржЬрж╛рж░ржирзЗржо ржмрж╛ ржЖржЗржбрж┐ рж▓рж┐ржЦрзБржиред")
    
    elif admin_action in ('add_balance', 'deduct_balance'):
        try:
            amount = float(message.text)
            user_id = context.user_data['admin_user_id']
            
            if admin_action == 'add_balance':
                db.admin_update_balance(user_id, amount)
                await message.reply_text(
                    f"тЬЕ {amount:.2f} ржкржпрж╝рзЗржирзНржЯ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА {user_id}-ржПрж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ ржпрзЛржЧ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред"
                )
            else:
                user = db.get_user(user_id)
                if user[7] >= amount:
                    db.admin_update_balance(user_id, -amount)
                    await message.reply_text(
                        f"тЬЕ {amount:.2f} ржкржпрж╝рзЗржирзНржЯ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА {user_id}-ржПрж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржерзЗржХрзЗ ржХржорж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗред"
                    )
                else:
                    await message.reply_text(
                        f"рждрзНрж░рзБржЯрж┐: ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ {user[7]:.2f} ржкржпрж╝рзЗржирзНржЯ, ржпрж╛ ржЕржирзБрж░рзЛржзржХрзГржд {amount:.2f} ржкржпрж╝рзЗржирзНржЯрзЗрж░ ржЪрзЗржпрж╝рзЗ ржХржоред"
                    )
            
            del context.user_data['admin_action']
            del context.user_data['admin_user_id']
        except ValueError:
            await message.reply_text("ржжрзБржГржЦрж┐ржд, ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж┐ ржмрзИржз рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржиред")

async def admin_task_management(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("тЮХ ржирждрзБржи ржЯрж╛рж╕рзНржХ ржпрзЛржЧ ржХрж░рзБржи", callback_data="admin_add_task")],
        [InlineKeyboardButton("ЁЯУЭ ржЯрж╛рж╕рзНржХ рждрж╛рж▓рж┐ржХрж╛", callback_data="admin_list_tasks")],
        [InlineKeyboardButton("ЁЯЪл ржЯрж╛рж╕рзНржХ ржбрж┐рж▓рж┐ржЯ ржХрж░рзБржи", callback_data="admin_delete_task")],
        [InlineKeyboardButton("ЁЯФЩ ржЕрзНржпрж╛ржбржорж┐ржи ржорзЗржирзБ", callback_data="admin_menu")]
    ]
    
    await query.edit_message_text(
        "ржЯрж╛рж╕рзНржХ ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def admin_add_task(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "ржирждрзБржи ржЯрж╛рж╕рзНржХрзЗрж░ рж╢рж┐рж░рзЛржирж╛ржо рж▓рж┐ржЦрзБржи:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯФЩ ржЯрж╛рж╕рзНржХ ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛", callback_data="admin_task_management")]
        ])
    )
    context.user_data['admin_task'] = {'step': 1}

async def admin_process_add_task(update: Update, context: CallbackContext):
    message = update.message
    step = context.user_data['admin_task']['step']
    text = message.text
    
    if step == 1:
        context.user_data['admin_task']['title'] = text
        context.user_data['admin_task']['step'] = 2
        
        await message.reply_text(
            "ржЯрж╛рж╕рзНржХрзЗрж░ ржмрж┐ржмрж░ржг рж▓рж┐ржЦрзБржи:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("ЁЯФЩ ржмрж╛рждрж┐рж▓ ржХрж░рзБржи", callback_data="admin_task_management")]
            ])
        )
    elif step == 2:
        context.user_data['admin_task']['description'] = text
        context.user_data['admin_task']['step'] = 3
        
        await message.reply_text(
            "ржЯрж╛рж╕рзНржХрзЗрж░ URL рж▓рж┐ржЦрзБржи:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("ЁЯФЩ ржмрж╛рждрж┐рж▓ ржХрж░рзБржи", callback_data="admin_task_management")]
            ])
        )
    elif step == 3:
        if not text.startswith(('http://', 'https://')):
            await message.reply_text("ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж┐ ржмрзИржз URL рж▓рж┐ржЦрзБржи (http:// ржмрж╛ https:// ржжрж┐ржпрж╝рзЗ рж╢рзБрж░рзБ ржХрж░рждрзЗ рж╣ржмрзЗ)ред")
            return
        
        context.user_data['admin_task']['url'] = text
        context.user_data['admin_task']['step'] = 4
        
        await message.reply_text(
            "ржЯрж╛рж╕рзНржХрзЗрж░ ржкрзБрж░рж╕рзНржХрж╛рж░ (ржкржпрж╝рзЗржирзНржЯ) рж▓рж┐ржЦрзБржи:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("ЁЯФЩ ржмрж╛рждрж┐рж▓ ржХрж░рзБржи", callback_data="admin_task_management")]
            ])
        )
    elif step == 4:
        try:
            reward = float(text)
            title = context.user_data['admin_task']['title']
            description = context.user_data['admin_task'].get('description', '')
            url = context.user_data['admin_task']['url']
            
            task_id = db.add_task(title, description, url, reward)
            
            await message.reply_text(
                f"тЬЕ ржирждрзБржи ржЯрж╛рж╕рзНржХ ржпрзЛржЧ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!\n\n"
                f"ЁЯЖФ ржЖржЗржбрж┐: {task_id}\n"
                f"ЁЯУМ рж╢рж┐рж░рзЛржирж╛ржо: {title}\n"
                f"ЁЯТ░ ржкрзБрж░рж╕рзНржХрж╛рж░: {reward:.2f} ржкржпрж╝рзЗржирзНржЯ"
            )
            
            del context.user_data['admin_task']
        except ValueError:
            await message.reply_text("ржжрзБржГржЦрж┐ржд, ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж┐ ржмрзИржз рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржиред")

async def admin_list_tasks(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    tasks = db.get_active_tasks()
    if not tasks:
        await query.edit_message_text(
            "ржХрзЛржи рж╕ржХрзНрж░рж┐ржпрж╝ ржЯрж╛рж╕рзНржХ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("тЮХ ржирждрзБржи ржЯрж╛рж╕рзНржХ ржпрзЛржЧ ржХрж░рзБржи", callback_data="admin_add_task")],
                [InlineKeyboardButton("ЁЯФЩ ржЯрж╛рж╕рзНржХ ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛", callback_data="admin_task_management")]
            ])
        )
        return
    
    text = "ЁЯУЭ рж╕ржХрзНрж░рж┐ржпрж╝ ржЯрж╛рж╕рзНржХрзЗрж░ рждрж╛рж▓рж┐ржХрж╛:\n\n"
    for task in tasks:
        text += f"ЁЯЖФ {task[0]}\nЁЯУМ {task[1]}\nЁЯТ░ {task[4]:.2f} ржкржпрж╝рзЗржирзНржЯ\n\n"
    
    keyboard = [
        [InlineKeyboardButton("тЮХ ржирждрзБржи ржЯрж╛рж╕рзНржХ ржпрзЛржЧ ржХрж░рзБржи", callback_data="admin_add_task")],
        [InlineKeyboardButton("ЁЯЪл ржЯрж╛рж╕рзНржХ ржбрж┐рж▓рж┐ржЯ ржХрж░рзБржи", callback_data="admin_delete_task")],
        [InlineKeyboardButton("ЁЯФЩ ржЯрж╛рж╕рзНржХ ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛", callback_data="admin_task_management")]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def admin_delete_task(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "ржбрж┐рж▓рж┐ржЯ ржХрж░рждрзЗ ржЪрж╛ржУржпрж╝рж╛ ржЯрж╛рж╕рзНржХрзЗрж░ ржЖржЗржбрж┐ рж▓рж┐ржЦрзБржи:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯФЩ ржЯрж╛рж╕рзНржХ ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛", callback_data="admin_task_management")]
        ])
    )
    context.user_data['admin_action'] = 'delete_task'

async def admin_process_delete_task(update: Update, context: CallbackContext):
    message = update.message
    try:
        task_id = int(message.text)
        task = db.get_task(task_id)
        
        if task:
            db.conn.execute('UPDATE tasks SET is_active = FALSE WHERE task_id = ?', (task_id,))
            db.conn.commit()
            await message.reply_text(f"ржЯрж╛рж╕рзНржХ {task_id} рж╕ржлрж▓ржнрж╛ржмрзЗ ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")
        else:
            await message.reply_text("ржЯрж╛рж╕рзНржХ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")
    except ValueError:
        await message.reply_text("ржжрзБржГржЦрж┐ржд, ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж┐ ржмрзИржз ржЯрж╛рж╕рзНржХ ржЖржЗржбрж┐ рж▓рж┐ржЦрзБржиред")

async def admin_ad_management(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    pending_deposits = db.get_pending_deposits()
    pending_count = len(pending_deposits) if pending_deposits else 0
    
    keyboard = [
        [InlineKeyboardButton("ЁЯУК ржмрж┐ржЬрзНржЮрж╛ржкржи рждрж╛рж▓рж┐ржХрж╛", callback_data="admin_list_ads")],
        [InlineKeyboardButton("тЬЕ ржбрж┐ржкрзЛржЬрж┐ржЯ ржЕржирзБржорзЛржжржи ржХрж░рзБржи", callback_data="admin_approve_deposits")],
        [InlineKeyboardButton(f"тП│ ржкрзЗржирзНржбрж┐ржВ ржбрж┐ржкрзЛржЬрж┐ржЯ ({pending_count})", callback_data="admin_pending_deposits")],
        [InlineKeyboardButton("ЁЯФЩ ржЕрзНржпрж╛ржбржорж┐ржи ржорзЗржирзБ", callback_data="admin_menu")]
    ]
    
    await query.edit_message_text(
        "ржмрж┐ржЬрзНржЮрж╛ржкржи ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def admin_list_ads(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    ads = db.conn.execute('''
    SELECT a.*, u.username 
    FROM advertisements a
    LEFT JOIN users u ON a.user_id = u.user_id
    ORDER BY a.creation_date DESC
    LIMIT 50
    ''').fetchall()
    
    if not ads:
        await query.edit_message_text(
            "ржХрзЛржи ржмрж┐ржЬрзНржЮрж╛ржкржи ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("ЁЯФЩ ржмрж┐ржЬрзНржЮрж╛ржкржи ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛", callback_data="admin_ad_management")]
            ])
        )
        return
    
    text = "ЁЯУК ржмрж┐ржЬрзНржЮрж╛ржкржи рждрж╛рж▓рж┐ржХрж╛:\n\n"
    for ad in ads:
        status = "тЬЕ рж╕ржорзНржкрзВрж░рзНржг" if ad[7] == 'completed' else "ЁЯЪА ржЪрж▓ржорж╛ржи" if ad[7] == 'active' else "тП│ ржкрзЗржирзНржбрж┐ржВ"
        text += (
            f"ЁЯЖФ {ad[0]}\n"
            f"ЁЯСд @{ad[9] or 'N/A'} ({ad[1]})\n"
            f"ЁЯУМ {ad[2]}\n"
            f"ЁЯСБя╕ПтАНЁЯЧия╕П {ad[6]}/{ad[5]} ржнрж┐ржЙ\n"
            f"ЁЯТ╡ {ad[8]:.2f} ржкржпрж╝рзЗржирзНржЯ\n"
            f"ЁЯФД {status}\n\n"
        )
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯФЩ ржмрж┐ржЬрзНржЮрж╛ржкржи ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛", callback_data="admin_ad_management")]
        ])
    )

async def admin_pending_deposits(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    deposits = db.get_pending_deposits()
    if not deposits:
        await query.edit_message_text(
            "ржХрзЛржи ржкрзЗржирзНржбрж┐ржВ ржбрж┐ржкрзЛржЬрж┐ржЯ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("ЁЯФЩ ржмрж┐ржЬрзНржЮрж╛ржкржи ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛", callback_data="admin_ad_management")]
            ])
        )
        return
    
    text = "тП│ ржкрзЗржирзНржбрж┐ржВ ржбрж┐ржкрзЛржЬрж┐ржЯ:\n\n"
    for deposit in deposits:
        user = db.get_user(deposit[1])
        username = f"@{user[1]}" if user and user[1] else f"User {deposit[1]}"
        text += (
            f"ЁЯЖФ {deposit[0]}\n"
            f"ЁЯСд {username}\n"
            f"ЁЯТ░ {deposit[2]:.2f} ржкржпрж╝рзЗржирзНржЯ\n"
            f"ЁЯТ│ {deposit[3]}\n"
            f"ЁЯУЕ {deposit[5]}\n\n"
        )
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("тЬЕ ржЕржирзБржорзЛржжржи ржХрж░рзБржи", callback_data="admin_approve_deposits")],
            [InlineKeyboardButton("ЁЯФЩ ржмрж┐ржЬрзНржЮрж╛ржкржи ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛", callback_data="admin_ad_management")]
        ])
    )

async def admin_approve_deposits(update: Update, context: CallbackContext):
    query = update.callback_query
    a
