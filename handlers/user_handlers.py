from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, WebAppInfo
from telegram.ext import CallbackContext, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from config import Config
from database import Database
import random
import string
import time

db = Database()

# рж╣рзЗрж▓рзНржкрж╛рж░ ржлрж╛ржВрж╢ржи
async def check_channels_subscription(user_id, context: CallbackContext):
    if not Config.REQUIRED_CHANNELS:
        return True
    
    for channel in Config.REQUIRED_CHANNELS:
        try:
            member = await context.bot.get_chat_member(chat_id=channel, user_id=user_id)
            if member.status in ['left', 'kicked']:
                return False
        except Exception as e:
            print(f"Error checking channel subscription: {e}")
            return False
    return True

def generate_deposit_id():
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=10))

# ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
async def start(update: Update, context: CallbackContext):
    user = update.effective_user
    message = update.message
    
    # ржбрзЗржЯрж╛ржмрзЗрж╕рзЗ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржпрзЛржЧ ржХрж░рзБржи
    db.add_user(user.id, user.username, user.first_name, user.last_name)
    
    # ржЪрзНржпрж╛ржирзЗрж▓ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи ржЪрзЗржХ ржХрж░рзБржи
    is_subscribed = await check_channels_subscription(user.id, context)
    
    if not is_subscribed:
        # ржЪрзНржпрж╛ржирзЗрж▓ ржЬржпрж╝рзЗржи ржХрж░рж╛рж░ ржЬржирзНржп ржмрж╛ржЯржи рждрзИрж░рж┐ ржХрж░рзБржи
        keyboard = []
        for channel in Config.REQUIRED_CHANNELS:
            try:
                chat = await context.bot.get_chat(channel)
                keyboard.append([InlineKeyboardButton(
                    text=f"ржЬржпрж╝рзЗржи ржХрж░рзБржи {chat.title}", 
                    url=f"https://t.me/{chat.username}" if chat.username else chat.invite_link
                )])
            except:
                continue
        
        keyboard.append([InlineKeyboardButton("ржЖржорж┐ ржЬржпрж╝рзЗржи ржХрж░рзЗржЫрж┐ тЬЕ", callback_data="check_subscription")])
        
        await message.reply_text(
            "ржмржЯ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржирж┐ржЪрзЗрж░ ржЪрзНржпрж╛ржирзЗрж▓ржЧрзБрж▓рзЛрждрзЗ ржЬржпрж╝рзЗржи ржХрж░рзБржи:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return
    
    # ржУржпрж╝рж╛рж▓рзЗржЯ рж╕рзЗржЯ ржХрж░рж╛ ржЖржЫрзЗ ржХрж┐ржирж╛ ржЪрзЗржХ ржХрж░рзБржи
    user_data = db.get_user(user.id)
    if not user_data[5]:  # wallet_address
        await message.reply_text(
            "ржЯрзНрж░рж╛ржиржЬрзЗржХрж╢ржирзЗрж░ ржЬржирзНржп ржЖржкржирж╛рж░ ржУржпрж╝рж╛рж▓рзЗржЯ ржарж┐ржХрж╛ржирж╛ рж╕рзЗржЯ ржХрж░рзБржиред ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзЗ ржЖржкржирж╛рж░ ржкрзЗржорзЗржирзНржЯ ржорзЗржержб ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("ржУржпрж╝рж╛рж▓рзЗржЯ рж╕рзЗржЯ ржХрж░рзБржи", callback_data="set_wallet")
            ]])
        )
        return
    
    # ржнрзЗрж░рж┐ржлрж┐ржХрзЗрж╢ржи рж╕ржорзНржкрзВрж░рзНржг рж╣рж▓рзЗ ржорзВрж▓ ржорзЗржирзБ ржжрзЗржЦрж╛ржи
    await show_main_menu(update, context)

async def check_subscription_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    is_subscribed = await check_channels_subscription(query.from_user.id, context)
    
    if is_subscribed:
        db.verify_user(query.from_user.id)
        await query.edit_message_text("ржзржирзНржпржмрж╛ржж! ржЖржкржирж┐ ржПржЦржи ржмржЯ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред")
        await show_main_menu_from_query(query, context)
    else:
        await query.answer("ржЖржкржирж┐ ржПржЦржиржУ рж╕ржм ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржЬржпрж╝рзЗржи ржХрж░рзЗржиржирж┐ред ржжржпрж╝рж╛ ржХрж░рзЗ рж╕ржм ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржЬржпрж╝рзЗржи ржХрж░рзБржи ржПржмржВ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред", show_alert=True)

async def set_wallet_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("ржмрж┐ржХрж╛рж╢", callback_data="wallet_bkash")],
        [InlineKeyboardButton("ржиржЧржж", callback_data="wallet_nagad")],
        [InlineKeyboardButton("рж░ржХрзЗржЯ", callback_data="wallet_rocket")],
        [InlineKeyboardButton("ржХрзНрж░рж┐ржкрзНржЯрзЛ (USDT TRC20)", callback_data="wallet_crypto")],
    ]
    
    await query.edit_message_text(
        "ржкрзЗржорзЗржирзНржЯ ржЧрзНрж░рж╣ржгрзЗрж░ ржЬржирзНржп ржЖржкржирж╛рж░ ржкржЫржирзНржжрзЗрж░ ржУржпрж╝рж╛рж▓рзЗржЯ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def wallet_type_selected(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    wallet_type = query.data.replace("wallet_", "")
    context.user_data['wallet_type'] = wallet_type
    
    await query.edit_message_text(
        f"ржЖржкржирж╛рж░ {wallet_type.upper()} ржУржпрж╝рж╛рж▓рзЗржЯ ржарж┐ржХрж╛ржирж╛ ржкрж╛ржарж╛ржи:"
    )

async def save_wallet_address(update: Update, context: CallbackContext):
    message = update.message
    wallet_address = message.text
    wallet_type = context.user_data.get('wallet_type')
    
    if wallet_type and wallet_address:
        db.update_user_wallet(message.from_user.id, wallet_address, wallet_type)
        db.verify_user(message.from_user.id)
        await message.reply_text("ржЖржкржирж╛рж░ ржУржпрж╝рж╛рж▓рзЗржЯ ржарж┐ржХрж╛ржирж╛ рж╕ржлрж▓ржнрж╛ржмрзЗ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!")
        await show_main_menu(update, context)
    else:
        await message.reply_text("ржжрзБржГржЦрж┐ржд, ржПржХржЯрж┐ рждрзНрж░рзБржЯрж┐ рж╣ржпрж╝рзЗржЫрзЗред ржжржпрж╝рж╛ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")

async def show_main_menu(update: Update, context: CallbackContext):
    message = update.message
    user_id = message.from_user.id
    
    keyboard = [
        [InlineKeyboardButton("ЁЯТ░ ржЯрж╛рж╕рзНржХ ржХрж░рзБржи", callback_data="tasks")],
        [InlineKeyboardButton("ЁЯУг ржмрж┐ржЬрзНржЮрж╛ржкржи ржжрж┐ржи", callback_data="ads")],
        [InlineKeyboardButton("ЁЯСд ржЖржорж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ", callback_data="account")],
        [InlineKeyboardButton("ЁЯТ╡ ржЙржЗржержбрзНрж░", callback_data="withdraw")],
        [InlineKeyboardButton("ЁЯФЧ рж░рзЗржлрж╛рж░рзЗрж▓", callback_data="referral")],
    ]
    
    await message.reply_text(
        "ржкрзНрж░ржзрж╛ржи ржорзЗржирзБ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_main_menu_from_query(query, context: CallbackContext):
    user_id = query.from_user.id
    
    keyboard = [
        [InlineKeyboardButton("ЁЯТ░ ржЯрж╛рж╕рзНржХ ржХрж░рзБржи", callback_data="tasks")],
        [InlineKeyboardButton("ЁЯУг ржмрж┐ржЬрзНржЮрж╛ржкржи ржжрж┐ржи", callback_data="ads")],
        [InlineKeyboardButton("ЁЯСд ржЖржорж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ", callback_data="account")],
        [InlineKeyboardButton("ЁЯТ╡ ржЙржЗржержбрзНрж░", callback_data="withdraw")],
        [InlineKeyboardButton("ЁЯФЧ рж░рзЗржлрж╛рж░рзЗрж▓", callback_data="referral")],
    ]
    
    await query.edit_message_text(
        "ржкрзНрж░ржзрж╛ржи ржорзЗржирзБ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_account(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    user = db.get_user(query.from_user.id)
    if not user:
        await query.edit_message_text("ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА рждржерзНржп ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")
        return
    
    balance = user[7]
    total_earned = user[8]
    referral_count = user[9]
    referral_earnings = user[10]
    wallet_type = user[6]
    wallet_address = user[5]
    
    text = (
        f"ЁЯСд ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рждржерзНржп:\n\n"
        f"ЁЯТ░ ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {balance:.2f} ржкржпрж╝рзЗржирзНржЯ\n"
        f"ЁЯТ╡ ржорзЛржЯ ржЖржпрж╝: {total_earned:.2f} ржкржпрж╝рзЗржирзНржЯ\n"
        f"ЁЯСе рж░рзЗржлрж╛рж░рзЗрж▓: {referral_count} ржЬржи (ржЖржпрж╝: {referral_earnings:.2f} ржкржпрж╝рзЗржирзНржЯ)\n"
        f"ЁЯТ│ ржУржпрж╝рж╛рж▓рзЗржЯ: {wallet_type.upper() if wallet_type else 'рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗ'}\n"
        f"ЁЯУМ ржарж┐ржХрж╛ржирж╛: {wallet_address if wallet_address else 'рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗ'}"
    )
    
    keyboard = [
        [InlineKeyboardButton("ЁЯФЩ ржорзВрж▓ ржорзЗржирзБ", callback_data="main_menu")],
        [InlineKeyboardButton("тЬПя╕П ржУржпрж╝рж╛рж▓рзЗржЯ ржкрж░рж┐ржмрж░рзНрждржи", callback_data="set_wallet")]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_tasks_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    tasks = db.get_active_tasks()
    if not tasks:
        await query.edit_message_text(
            "ржмрж░рзНрждржорж╛ржирзЗ ржХрзЛржи ржЯрж╛рж╕рзНржХ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред ржкрж░ржмрж░рзНрждрзАрждрзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("ЁЯФЩ ржорзВрж▓ ржорзЗржирзБ", callback_data="main_menu")]
            ])
        )
        return
    
    # рж╢рзЗрж╖ ржЯрж╛рж╕рзНржХ рж╕ржорзНржкржирзНржи ржХрж░рж╛рж░ рж╕ржоржпрж╝ ржЪрзЗржХ ржХрж░рзБржи
    last_task_time = db.get_user_last_task_time(query.from_user.id)
    if last_task_time:
        current_time = time.time()
        last_time = time.mktime(time.strptime(last_task_time, "%Y-%m-%d %H:%M:%S"))
        cooldown_remaining = Config.TASK_COOLDOWN - (current_time - last_time)
        
        if cooldown_remaining > 0:
            minutes = int(cooldown_remaining // 60)
            seconds = int(cooldown_remaining % 60)
            await query.edit_message_text(
                f"ржЖржкржирж┐ ржкрж░ржмрж░рзНрждрзА ржЯрж╛рж╕рзНржХ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржи {minutes} ржорж┐ржирж┐ржЯ {seconds} рж╕рзЗржХрзЗржирзНржб ржкрж░ред",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("ЁЯФЩ ржорзВрж▓ ржорзЗржирзБ", callback_data="main_menu")]
                ])
            )
            return
    
    # Web App ржмрж╛ржЯржи рж╕рж╣ ржЯрж╛рж╕рзНржХ ржорзЗржирзБ ржжрзЗржЦрж╛ржи
    task = tasks[0]  # ржкрзНрж░ржержо ржЯрж╛рж╕рзНржХржЯрж┐ ржжрзЗржЦрж╛ржи (ржЖржкржирж┐ рж░рзНржпрж╛ржирзНржбржо ржмрж╛ ржЕржирзНржп ржХрзЛржирзЛ рж▓ржЬрж┐ржХ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи)
    web_app_url = f"{Config.WEB_APP_URL}?task_id={task[0]}&user_id={query.from_user.id}"
    
    keyboard = [
        [InlineKeyboardButton(
            "ржЯрж╛рж╕рзНржХ рж╢рзБрж░рзБ ржХрж░рзБржи",
            web_app=WebAppInfo(url=web_app_url)
        )],
        [InlineKeyboardButton("ЁЯФЩ ржорзВрж▓ ржорзЗржирзБ", callback_data="main_menu")]
    ]
    
    await query.edit_message_text(
        f"ЁЯОп ржЯрж╛рж╕рзНржХ: {task[1]}\n\n"
        f"ЁЯУЭ ржмрж┐ржмрж░ржг: {task[2]}\n\n"
        f"ЁЯТ░ ржкрзБрж░рж╕рзНржХрж╛рж░: {task[4]:.2f} ржкржпрж╝рзЗржирзНржЯ",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def complete_task_from_webapp(update: Update, context: CallbackContext):
    # WebApp ржбрзЗржЯрж╛ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рзБржи
    data = json.loads(update.effective_message.web_app_data.data)
    user_id = data.get('user_id')
    task_id = data.get('task_id')
    
    if not user_id or not task_id:
        return
    
    # ржЯрж╛рж╕рзНржХ рж╕ржорзНржкржирзНржи ржХрж░рзБржи
    reward = db.complete_task(user_id, task_id)
    
    await context.bot.send_message(
        chat_id=user_id,
        text=f"ЁЯОЙ ржЯрж╛рж╕рзНржХ рж╕ржорзНржкржирзНржи рж╣ржпрж╝рзЗржЫрзЗ! ржЖржкржирж┐ {reward:.2f} ржкржпрж╝рзЗржирзНржЯ ржкрзЗржпрж╝рзЗржЫрзЗржиред"
    )

async def show_withdraw_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    user = db.get_user(query.from_user.id)
    if not user or not user[5]:  # wallet_address
        await query.edit_message_text(
            "ржЙржЗржержбрзНрж░ ржХрж░рж╛рж░ ржЬржирзНржп ржЖржкржирж╛ржХрзЗ ржкрзНрж░ржержорзЗ ржЖржкржирж╛рж░ ржУржпрж╝рж╛рж▓рзЗржЯ ржарж┐ржХрж╛ржирж╛ рж╕рзЗржЯ ржХрж░рждрзЗ рж╣ржмрзЗред",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("ржУржпрж╝рж╛рж▓рзЗржЯ рж╕рзЗржЯ ржХрж░рзБржи", callback_data="set_wallet")],
                [InlineKeyboardButton("ЁЯФЩ ржорзВрж▓ ржорзЗржирзБ", callback_data="main_menu")]
            ])
        )
        return
    
    balance = user[7]
    wallet_type = user[6]
    wallet_address = user[5]
    
    text = (
        f"ЁЯТ╡ ржЙржЗржержбрзНрж░ ржЕржирзБрж░рзЛржз\n\n"
        f"ЁЯТ░ ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {balance:.2f} ржкржпрж╝рзЗржирзНржЯ\n"
        f"ЁЯТ│ ржУржпрж╝рж╛рж▓рзЗржЯ: {wallet_type.upper()}\n"
        f"ЁЯУМ ржарж┐ржХрж╛ржирж╛: {wallet_address}\n\n"
        f"рж╕рж░рзНржмржирж┐ржорзНржи ржЙржЗржержбрзНрж░: {Config.MIN_WITHDRAW:.2f} ржкржпрж╝рзЗржирзНржЯ\n"
        f"рж╕рж░рзНржмрзЛржЪрзНржЪ ржЙржЗржержбрзНрж░: {Config.MAX_WITHDRAW:.2f} ржкржпрж╝рзЗржирзНржЯ\n\n"
        f"ржЙржЗржержбрзНрж░ ржХрж░рж╛рж░ ржкрж░рж┐ржорж╛ржг рж▓рж┐ржЦрзБржи:"
    )
    
    await query.edit_message_text(text)
    context.user_data['awaiting_withdraw_amount'] = True

async def process_withdraw_amount(update: Update, context: CallbackContext):
    message = update.message
    user_id = message.from_user.id
    
    if not context.user_data.get('awaiting_withdraw_amount'):
        return
    
    try:
        amount = float(message.text)
        user = db.get_user(user_id)
        balance = user[7]
        
        if amount < Config.MIN_WITHDRAW:
            await message.reply_text(
                f"рждрзНрж░рзБржЯрж┐: рж╕рж░рзНржмржирж┐ржорзНржи ржЙржЗржержбрзНрж░ ржкрж░рж┐ржорж╛ржг {Config.MIN_WITHDRAW:.2f} ржкржпрж╝рзЗржирзНржЯред"
            )
            return
        elif amount > Config.MAX_WITHDRAW:
            await message.reply_text(
                f"рждрзНрж░рзБржЯрж┐: рж╕рж░рзНржмрзЛржЪрзНржЪ ржЙржЗржержбрзНрж░ ржкрж░рж┐ржорж╛ржг {Config.MAX_WITHDRAW:.2f} ржкржпрж╝рзЗржирзНржЯред"
            )
            return
        elif amount > balance:
            await message.reply_text(
                "рждрзНрж░рзБржЯрж┐: ржЖржкржирж╛рж░ ржкрж░рзНржпрж╛ржкрзНржд ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржирзЗржЗред"
            )
            return
        
        # ржЙржЗржержбрзНрж░ ржЕржирзБрж░рзЛржз рждрзИрж░рж┐ ржХрж░рзБржи
        wallet_address = user[5]
        db.create_withdrawal(user_id, amount, wallet_address)
        
        await message.reply_text(
            f"тЬЕ {amount:.2f} ржкржпрж╝рзЗржирзНржЯ ржЙржЗржержбрзНрж░ ржХрж░рж╛рж░ ржЕржирзБрж░рзЛржз рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред "
            f"ржЖржкржирж╛рж░ {user[6].upper()} ржУржпрж╝рж╛рж▓рзЗржЯрзЗ ({wallet_address}) 24 ржШржирзНржЯрж╛рж░ ржоржзрзНржпрзЗ ржкрзЗржорзЗржирзНржЯ ржХрж░рж╛ рж╣ржмрзЗред\n\n"
            "ржЖржкржирж╛рж░ рж▓рзЗржиржжрзЗржирзЗрж░ ржЗрждрж┐рж╣рж╛рж╕ ржжрзЗржЦрждрзЗ 'ржЖржорж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ' ржП ржпрж╛ржиред"
        )
        
        # ржЕрзНржпрж╛ржбржорж┐ржиржжрзЗрж░ ржирзЛржЯрж┐ржлрж╛ржЗ ржХрж░рзБржи
        for admin_id in Config.ADMIN_IDS:
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=f"ржирждрзБржи ржЙржЗржержбрзНрж░ ржЕржирзБрж░рзЛржз:\n\n"
                         f"ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА: @{user[1]} ({user_id})\n"
                         f"ржкрж░рж┐ржорж╛ржг: {amount:.2f} ржкржпрж╝рзЗржирзНржЯ\n"
                         f"ржУржпрж╝рж╛рж▓рзЗржЯ: {user[6].upper()} ({wallet_address})"
                )
            except:
                continue
        
        del context.user_data['awaiting_withdraw_amount']
        await show_main_menu(update, context)
    except ValueError:
        await message.reply_text("ржжрзБржГржЦрж┐ржд, ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж┐ ржмрзИржз рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржиред")

async def show_referral_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    user = db.get_user(query.from_user.id)
    if not user:
        return
    
    referral_count = user[9]
    referral_earnings = user[10]
    referral_link = f"https://t.me/{context.bot.username}?start={query.from_user.id}"
    
    text = (
        f"ЁЯСе рж░рзЗржлрж╛рж░рзЗрж▓ ржкрзНрж░рзЛржЧрзНрж░рж╛ржо\n\n"
        f"ржЖржкржирж┐ ржПржЦржи ржкрж░рзНржпржирзНржд {referral_count} ржЬржиржХрзЗ рж░рзЗржлрж╛рж░ ржХрж░рзЗржЫрзЗржи ржПржмржВ {referral_earnings:.2f} ржкржпрж╝рзЗржирзНржЯ ржЕрж░рзНржЬржи ржХрж░рзЗржЫрзЗржиред\n\n"
        f"ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржЩрзНржХ:\n{referral_link}\n\n"
        f"ржЖржкржирж╛рж░ рж▓рж┐ржЩрзНржХ рж╢рзЗржпрж╝рж╛рж░ ржХрж░рзБржи ржПржмржВ ржкрзНрж░рждрж┐ржЯрж┐ рж╕ржлрж▓ рж░рзЗржлрж╛рж░рзЗрж▓рзЗрж░ ржЬржирзНржп ржкрзБрж░рж╕рзНржХрж╛рж░ ржкрж╛ржи!"
    )
    
    keyboard = [
        [InlineKeyboardButton("ЁЯФЩ ржорзВрж▓ ржорзЗржирзБ", callback_data="main_menu")]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_ads_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    user = db.get_user(query.from_user.id)
    if not user:
        return
    
    text = "ЁЯУг ржмрж┐ржЬрзНржЮрж╛ржкржи ржкрзНрж▓рзНржпрж╛ржЯржлрж░рзНржо\n\nржЖржкржирж┐ ржпрж╛ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи:"
    
    keyboard = [
        [InlineKeyboardButton("ЁЯЖХ ржирждрзБржи ржмрж┐ржЬрзНржЮрж╛ржкржи рждрзИрж░рж┐ ржХрж░рзБржи", callback_data="create_ad")],
        [InlineKeyboardButton("ЁЯУК ржЖржорж╛рж░ ржмрж┐ржЬрзНржЮрж╛ржкржи", callback_data="my_ads")],
        [InlineKeyboardButton("ЁЯТ│ ржкржпрж╝рзЗржирзНржЯ ржХрж┐ржирзБржи", callback_data="buy_points")],
        [InlineKeyboardButton("ЁЯФЩ ржорзВрж▓ ржорзЗржирзБ", callback_data="main_menu")]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_my_ads(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    ads = db.get_user_ads(query.from_user.id)
    if not ads:
        await query.edit_message_text(
            "ржЖржкржирж╛рж░ ржХрзЛржи ржмрж┐ржЬрзНржЮрж╛ржкржи ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("ЁЯЖХ ржирждрзБржи ржмрж┐ржЬрзНржЮрж╛ржкржи рждрзИрж░рж┐ ржХрж░рзБржи", callback_data="create_ad")],
                [InlineKeyboardButton("ЁЯФЩ ржмрж┐ржЬрзНржЮрж╛ржкржи ржорзЗржирзБ", callback_data="ads")]
            ])
        )
        return
    
    text = "ЁЯУК ржЖржкржирж╛рж░ ржмрж┐ржЬрзНржЮрж╛ржкржи:\n\n"
    for ad in ads:
        status = "тЬЕ рж╕ржорзНржкрзВрж░рзНржг" if ad[7] == 'completed' else "ЁЯЪА ржЪрж▓ржорж╛ржи" if ad[7] == 'active' else "тП│ ржкрзЗржирзНржбрж┐ржВ"
        text += (
            f"ЁЯУМ {ad[2]}\n"
            f"ЁЯФЧ рж▓рж┐ржЩрзНржХ: {ad[4]}\n"
            f"ЁЯСБя╕ПтАНЁЯЧия╕П ржнрж┐ржЙ: {ad[6]}/{ad[5]}\n"
            f"ЁЯТ╡ ржЦрж░ржЪ: {ad[8]:.2f} ржкржпрж╝рзЗржирзНржЯ\n"
            f"ЁЯУЕ рждрж╛рж░рж┐ржЦ: {ad[9]}\n"
            f"ЁЯФД ржЕржмрж╕рзНржерж╛: {status}\n\n"
        )
    
    keyboard = [
        [InlineKeyboardButton("ЁЯЖХ ржирждрзБржи ржмрж┐ржЬрзНржЮрж╛ржкржи рждрзИрж░рж┐ ржХрж░рзБржи", callback_data="create_ad")],
        [InlineKeyboardButton("ЁЯФЩ ржмрж┐ржЬрзНржЮрж╛ржкржи ржорзЗржирзБ", callback_data="ads")]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def create_ad_step1(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "ржмрж┐ржЬрзНржЮрж╛ржкржирзЗрж░ рж╢рж┐рж░рзЛржирж╛ржо рж▓рж┐ржЦрзБржи:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯФЩ ржмрж┐ржЬрзНржЮрж╛ржкржи ржорзЗржирзБ", callback_data="ads")]
        ])
    )
    context.user_data['ad_creation'] = {'step': 1}

async def process_ad_creation(update: Update, context: CallbackContext):
    message = update.message
    user_id = message.from_user.id
    
    if 'ad_creation' not in context.user_data:
        return
    
    step = context.user_data['ad_creation']['step']
    text = message.text
    
    if step == 1:
        context.user_data['ad_creation']['title'] = text
        context.user_data['ad_creation']['step'] = 2
        
        await message.reply_text(
            "ржмрж┐ржЬрзНржЮрж╛ржкржирзЗрж░ ржмрж┐ржмрж░ржг рж▓рж┐ржЦрзБржи:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("ЁЯФЩ ржмрж╛рждрж┐рж▓ ржХрж░рзБржи", callback_data="ads")]
            ])
        )
    elif step == 2:
        context.user_data['ad_creation']['description'] = text
        context.user_data['ad_creation']['step'] = 3
        
        await message.reply_text(
            "ржмрж┐ржЬрзНржЮрж╛ржкржирзЗрж░ ржЯрж╛рж░рзНржЧрзЗржЯ URL рж▓рж┐ржЦрзБржи (ржпрзЗ рж▓рж┐ржЩрзНржХрзЗ ржХрзНрж▓рж┐ржХ ржХрж░рж▓рзЗ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░рж╛ ржпрж╛ржмрзЗ):",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("ЁЯФЩ ржмрж╛рждрж┐рж▓ ржХрж░рзБржи", callback_data="ads")]
            ])
        )
    elif step == 3:
        if not text.startswith(('http://', 'https://')):
            await message.reply_text("ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж┐ ржмрзИржз URL рж▓рж┐ржЦрзБржи (http:// ржмрж╛ https:// ржжрж┐ржпрж╝рзЗ рж╢рзБрж░рзБ ржХрж░рждрзЗ рж╣ржмрзЗ)ред")
            return
        
        context.user_data['ad_creation']['target_url'] = text
        context.user_data['ad_creation']['step'] = 4
        
        keyboard = [
            [InlineKeyboardButton("100 ржнрж┐ржЙ - 100 ржкржпрж╝рзЗржирзНржЯ", callback_data="ad_package_100")],
            [InlineKeyboardButton("500 ржнрж┐ржЙ - 450 ржкржпрж╝рзЗржирзНржЯ", callback_data="ad_package_500")],
            [InlineKeyboardButton("1000 ржнрж┐ржЙ - 800 ржкржпрж╝рзЗржирзНржЯ", callback_data="ad_package_1000")],
            [InlineKeyboardButton("ЁЯФЩ ржмрж╛рждрж┐рж▓ ржХрж░рзБржи", callback_data="ads")]
        ]
        
        await message.reply_text(
            "ржПржХржЯрж┐ ржмрж┐ржЬрзНржЮрж╛ржкржи ржкрзНржпрж╛ржХрзЗржЬ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def select_ad_package(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    if 'ad_creation' not in context.user_data:
        await query.edit_message_text("рждрзНрж░рзБржЯрж┐: ржмрж┐ржЬрзНржЮрж╛ржкржи рждрзИрж░рж┐ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржкрзБржирж░рж╛ржпрж╝ рж╢рзБрж░рзБ ржХрж░рзБржиред")
        return
    
    package = query.data.replace("ad_package_", "")
    if package == "100":
        views = 100
        cost = 100
    elif package == "500":
        views = 500
        cost = 450
    elif package == "1000":
        views = 1000
        cost = 800
    else:
        await query.edit_message_text("ржЕржмрзИржз ржкрзНржпрж╛ржХрзЗржЬ ржирж┐рж░рзНржмрж╛ржЪржиред")
        return
    
    context.user_data['ad_creation']['total_views'] = views
    context.user_data['ad_creation']['cost'] = cost
    
    user = db.get_user(query.from_user.id)
    balance = user[7]
    
    if balance >= cost:
        # ржмрж┐ржЬрзНржЮрж╛ржкржи рждрзИрж░рж┐ ржХрж░рзБржи
        ad_id = db.create_advertisement(
            user_id=query.from_user.id,
            title=context.user_data['ad_creation']['title'],
            description=context.user_data['ad_creation'].get('description', ''),
            target_url=context.user_data['ad_creation']['target_url'],
            total_views=views,
            cost=cost
        )
        
        # ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржХржорж╛ржирзЛ
        db.update_balance(query.from_user.id, -cost)
        
        # рж▓рзЗржиржжрзЗржи рж╣рж┐рж╕рж╛ржмрзЗ ржпрзЛржЧ ржХрж░рзБржи
        db_conn = db.conn
        cursor = db_conn.cursor()
        cursor.execute('''
        INSERT INTO transactions 
        (user_id, amount, transaction_type, status, details)
        VALUES (?, ?, ?, ?, ?)
        ''', (query.from_user.id, cost, 'ad_spend', 'completed', f'Created ad ID: {ad_id}'))
        db_conn.commit()
        
        await query.edit_message_text(
            f"тЬЕ ржЖржкржирж╛рж░ ржмрж┐ржЬрзНржЮрж╛ржкржи рж╕ржлрж▓ржнрж╛ржмрзЗ рждрзИрж░рж┐ рж╣ржпрж╝рзЗржЫрзЗ!\n\n"
            f"ЁЯУМ рж╢рж┐рж░рзЛржирж╛ржо: {context.user_data['ad_creation']['ti
