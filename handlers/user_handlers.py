from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, WebAppInfo
from telegram.ext import CallbackContext, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from config import Config
from database import Database
import random
import string
import time

db = Database()

# рж╣рзЗрж▓рзНржкрж╛рж░ ржлрж╛ржВрж╢ржи
def generate_deposit_id():
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=10))

async def show_deposit_methods(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    keyboard = []
    
    if Config.BKASH_ENABLED and db.get_setting('BKASH_ENABLED') == '1':
        keyboard.append([InlineKeyboardButton("ЁЯУ▒ ржмрж┐ржХрж╛рж╢ (Bkash)", callback_data="deposit_bkash")])
    
    if Config.CRYPTO_ENABLED and db.get_setting('CRYPTO_ENABLED') == '1':
        keyboard.append([InlineKeyboardButton("ЁЯкЩ ржХрзНрж░рж┐ржкрзНржЯрзЛ (Crypto)", callback_data="deposit_crypto")])
    
    keyboard.append([InlineKeyboardButton("ЁЯФЩ ржорзВрж▓ ржорзЗржирзБ", callback_data="main_menu")])
    
    if not keyboard:
        await query.edit_message_text(
            "ржмрж░рзНрждржорж╛ржирзЗ ржХрзЛржи ржбрж┐ржкрзЛржЬрж┐ржЯ ржкржжрзНржзрждрж┐ рж╕ржХрзНрж░рж┐ржпрж╝ ржирзЗржЗред ржкрж░ржмрж░рзНрждрзАрждрзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("ЁЯФЩ ржорзВрж▓ ржорзЗржирзБ", callback_data="main_menu")]])
        )
        return
    
    await query.edit_message_text(
        "ржбрж┐ржкрзЛржЬрж┐ржЯ ржХрж░рж╛рж░ ржЬржирзНржп ржкрзЗржорзЗржирзНржЯ ржкржжрзНржзрждрж┐ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def deposit_bkash_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "ржмрж┐ржХрж╛рж╢рзЗ ржбрж┐ржкрзЛржЬрж┐ржЯ ржХрж░рждрзЗ ржЪрж╛ржЗрж▓рзЗ ржирж┐ржЪрзЗрж░ ржкржжржХрзНрж╖рзЗржкржЧрзБрж▓рзЛ ржЕржирзБрж╕рж░ржг ржХрж░рзБржи:\n\n"
        "1. ржирж┐ржЪрзЗрж░ ржмрж┐ржХрж╛рж╢ ржорж╛рж░рзНржЪрзЗржирзНржЯ ржиржорзНржмрж░рзЗ ржЯрж╛ржХрж╛ ржкрж╛ржарж╛ржи:\n"
        f"<code>{db.get_setting('BKASH_MERCHANT_NO')}</code>\n\n"
        "2. ржЯрж╛ржХрж╛рж░ ржкрж░рж┐ржорж╛ржг рж▓рж┐ржЦрзБржи (ржЯрж╛ржХрж╛ржпрж╝):",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯФЩ ржкрзЗржорзЗржирзНржЯ ржкржжрзНржзрждрж┐", callback_data="deposit_methods")]
        ]),
        parse_mode="HTML"
    )
    context.user_data['deposit_method'] = 'bkash'

async def deposit_crypto_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("USDT (TRC20)", callback_data="crypto_usdt")],
        [InlineKeyboardButton("TON", callback_data="crypto_ton")],
        [InlineKeyboardButton("DOGE", callback_data="crypto_doge")],
        [InlineKeyboardButton("ЁЯФЩ ржкрзЗржорзЗржирзНржЯ ржкржжрзНржзрждрж┐", callback_data="deposit_methods")]
    ]
    
    await query.edit_message_text(
        "ржХрзНрж░рж┐ржкрзНржЯрзЛржХрж╛рж░рзЗржирзНрж╕рж┐ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def crypto_currency_selected(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    crypto_type = query.data.replace("crypto_", "")
    context.user_data['deposit_method'] = f'crypto_{crypto_type}'
    
    await query.edit_message_text(
        f"{crypto_type.upper()} ржбрж┐ржкрзЛржЬрж┐ржЯ ржХрж░рждрзЗ ржЪрж╛ржЗрж▓рзЗ ржирж┐ржЪрзЗрж░ ржкржжржХрзНрж╖рзЗржкржЧрзБрж▓рзЛ ржЕржирзБрж╕рж░ржг ржХрж░рзБржи:\n\n"
        "1. ржирж┐ржЪрзЗрж░ ржУржпрж╝рж╛рж▓рзЗржЯ ржарж┐ржХрж╛ржирж╛ржпрж╝ ржХрзНрж░рж┐ржкрзНржЯрзЛ ржкрж╛ржарж╛ржи:\n"
        f"<code>{db.get_setting(f'{crypto_type.upper()}_WALLET')}</code>\n\n"
        f"2. {crypto_type.upper()} ржПрж░ ржкрж░рж┐ржорж╛ржг рж▓рж┐ржЦрзБржи:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯФЩ ржХрзНрж░рж┐ржкрзНржЯрзЛ ржирж┐рж░рзНржмрж╛ржЪржи", callback_data="deposit_crypto")]
        ]),
        parse_mode="HTML"
    )

async def process_deposit_amount(update: Update, context: CallbackContext):
    message = update.message
    user_id = message.from_user.id
    deposit_method = context.user_data.get('deposit_method')
    
    if not deposit_method:
        return
    
    try:
        amount = float(message.text)
        
        if deposit_method == 'bkash':
            # ржЯрж╛ржХрж╛ ржерзЗржХрзЗ ржкржпрж╝рзЗржирзНржЯ ржХржиржнрж╛рж░рзНржЯ
            points = amount * Config.POINTS_RATE['bkash']
            payment_details = None
        elif deposit_method.startswith('crypto_'):
            crypto_type = deposit_method.split('_')[1]
            points = amount * Config.POINTS_RATE[crypto_type]
            payment_details = db.get_setting(f'{crypto_type.upper()}_WALLET')
        else:
            await message.reply_text("ржЕржмрзИржз ржкрзЗржорзЗржирзНржЯ ржкржжрзНржзрждрж┐ред")
            return
        
        deposit_id = generate_deposit_id()
        db.create_deposit_request(deposit_id, user_id, points, deposit_method, payment_details)
        
        if deposit_method == 'bkash':
            text = (
                f"ЁЯУ▒ ржмрж┐ржХрж╛рж╢ ржбрж┐ржкрзЛржЬрж┐ржЯ ржЕржирзБрж░рзЛржз рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!\n\n"
                f"ЁЯЖФ ржбрж┐ржкрзЛржЬрж┐ржЯ ржЖржЗржбрж┐: <code>{deposit_id}</code>\n"
                f"ЁЯТ░ ржкрж░рж┐ржорж╛ржг: {amount:.2f} ржЯрж╛ржХрж╛ ({points:.2f} ржкржпрж╝рзЗржирзНржЯ)\n"
                f"ЁЯУЮ ржмрж┐ржХрж╛рж╢ ржиржорзНржмрж░: <code>{db.get_setting('BKASH_MERCHANT_NO')}</code>\n\n"
                "ржкрзЗржорзЗржирзНржЯ ржХрж░рж╛рж░ рж╕ржоржпрж╝ рж░рзЗржлрж╛рж░рзЗржирзНрж╕ рж╣рж┐рж╕рзЗржмрзЗ ржбрж┐ржкрзЛржЬрж┐ржЯ ржЖржЗржбрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред\n"
                "ржкрзЗржорзЗржирзНржЯ рж╕ржорзНржкржирзНржи рж╣рж▓рзЗ, TrxID ржПржЗ ржЪрзНржпрж╛ржЯрзЗ ржкрж╛ржарж╛ржиред"
            )
        else:
            crypto_type = deposit_method.split('_')[1]
            text = (
                f"ЁЯкЩ {crypto_type.upper()} ржбрж┐ржкрзЛржЬрж┐ржЯ ржЕржирзБрж░рзЛржз рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!\n\n"
                f"ЁЯЖФ ржбрж┐ржкрзЛржЬрж┐ржЯ ржЖржЗржбрж┐: <code>{deposit_id}</code>\n"
                f"ЁЯТ░ ржкрж░рж┐ржорж╛ржг: {amount:.2f} {crypto_type.upper()} ({points:.2f} ржкржпрж╝рзЗржирзНржЯ)\n"
                f"ЁЯУМ ржУржпрж╝рж╛рж▓рзЗржЯ: <code>{db.get_setting(f'{crypto_type.upper()}_WALLET')}</code>\n\n"
                "ржкрзЗржорзЗржирзНржЯ рж╕ржорзНржкржирзНржи рж╣рж▓рзЗ, ржЯрзНрж░рж╛ржиржЬрзЗржХрж╢ржи рж╣рзНржпрж╛рж╢ (TxID) ржПржЗ ржЪрзНржпрж╛ржЯрзЗ ржкрж╛ржарж╛ржиред"
            )
        
        keyboard = [
            [InlineKeyboardButton("ЁЯУд TxID/TrxID ржЬржорж╛ ржжрж┐ржи", callback_data=f"submit_payment_{deposit_id}")],
            [InlineKeyboardButton("ЁЯФЩ ржорзВрж▓ ржорзЗржирзБ", callback_data="main_menu")]
        ]
        
        await message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
        
        # ржЕрзНржпрж╛ржбржорж┐ржиржжрзЗрж░ ржирзЛржЯрж┐ржлрж╛ржЗ ржХрж░рзБржи
        user = db.get_user(user_id)
        for admin_id in Config.ADMIN_IDS:
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=f"ржирждрзБржи ржбрж┐ржкрзЛржЬрж┐ржЯ ржЕржирзБрж░рзЛржз:\n\n"
                         f"ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА: @{user[1]} ({user_id})\n"
                         f"ржкржжрзНржзрждрж┐: {deposit_method}\n"
                         f"ржкрж░рж┐ржорж╛ржг: {amount:.2f} ({points:.2f} ржкржпрж╝рзЗржирзНржЯ)\n"
                         f"ржбрж┐ржкрзЛржЬрж┐ржЯ ржЖржЗржбрж┐: {deposit_id}"
                )
            except:
                continue
        
        del context.user_data['deposit_method']
    except ValueError:
        await message.reply_text("ржжрзБржГржЦрж┐ржд, ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж┐ ржмрзИржз рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржиред")

async def submit_payment_proof(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    deposit_id = query.data.replace("submit_payment_", "")
    context.user_data['deposit_id'] = deposit_id
    
    deposit = db.get_deposit(deposit_id)
    if not deposit:
        await query.edit_message_text("ржбрж┐ржкрзЛржЬрж┐ржЯ рждржерзНржп ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")
        return
    
    method = deposit[3]
    
    if method == 'bkash':
        text = "ржЖржкржирж╛рж░ ржмрж┐ржХрж╛рж╢ TrxID рж▓рж┐ржЦрзБржи:"
    else:
        text = "ржЖржкржирж╛рж░ ржЯрзНрж░рж╛ржиржЬрзЗржХрж╢ржи рж╣рзНржпрж╛рж╢ (TxID) рж▓рж┐ржЦрзБржи:"
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯФЩ ржмрж╛рждрж┐рж▓ ржХрж░рзБржи", callback_data="deposit_methods")]
        ])
    )

async def process_payment_proof(update: Update, context: CallbackContext):
    message = update.message
    user_id = message.from_user.id
    deposit_id = context.user_data.get('deposit_id')
    
    if not deposit_id:
        return
    
    txid = message.text.strip()
    deposit = db.get_deposit(deposit_id)
    
    if not deposit or deposit[1] != user_id:
        await message.reply_text("рждрзНрж░рзБржЯрж┐: ржбрж┐ржкрзЛржЬрж┐ржЯ рждржерзНржп ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")
        return
    
    db.update_deposit_status(deposit_id, 'pending', txid)
    
    await message.reply_text(
        "тЬЕ ржЖржкржирж╛рж░ ржкрзЗржорзЗржирзНржЯ ржкрзНрж░ржорж╛ржг рж╕ржлрж▓ржнрж╛ржмрзЗ ржЬржорж╛ ржжрзЗржУржпрж╝рж╛ рж╣ржпрж╝рзЗржЫрзЗред "
        "ржЖржорж╛ржжрзЗрж░ ржЯрж┐ржо ржПржЯрж┐ ржпрж╛ржЪрж╛ржЗ ржХрж░рж╛рж░ ржкрж░ ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ ржкржпрж╝рзЗржирзНржЯ ржпрзЛржЧ ржХрж░рж╛ рж╣ржмрзЗред"
    )
    
    # ржЕрзНржпрж╛ржбржорж┐ржиржжрзЗрж░ ржирзЛржЯрж┐ржлрж╛ржЗ ржХрж░рзБржи
    user = db.get_user(user_id)
    for admin_id in Config.ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=f"ржирждрзБржи ржкрзЗржорзЗржирзНржЯ ржкрзНрж░ржорж╛ржг ржЬржорж╛ ржжрзЗржУржпрж╝рж╛ рж╣ржпрж╝рзЗржЫрзЗ:\n\n"
                     f"ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА: @{user[1]} ({user_id})\n"
                     f"ржбрж┐ржкрзЛржЬрж┐ржЯ ржЖржЗржбрж┐: {deposit_id}\n"
                     f"ржкржжрзНржзрждрж┐: {deposit[3]}\n"
                     f"TxID/TrxID: {txid}\n\n"
                     f"ржЕржирзБржорзЛржжржи ржХрж░рждрзЗ: /admin"
            )
        except:
            continue
    
    del context.user_data['deposit_id']
    await show_main_menu(update, context)

# рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржи ржлрж╛ржВрж╢ржирзЗ ржирждрзБржи рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржпрзЛржЧ ржХрж░рзБржи
def register_user_handlers(application):
    # ржкрзВрж░рзНржмрзЗрж░ рж╕ржорж╕рзНржд рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
    # ...
    
    # ржирждрзБржи ржбрж┐ржкрзЛржЬрж┐ржЯ рж╕ржорзНржкрж░рзНржХрж┐ржд рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
    application.add_handler(CallbackQueryHandler(show_deposit_methods, pattern="^deposit_methods$"))
    application.add_handler(CallbackQueryHandler(deposit_bkash_handler, pattern="^deposit_bkash$"))
    application.add_handler(CallbackQueryHandler(deposit_crypto_handler, pattern="^deposit_crypto$"))
    application.add_handler(CallbackQueryHandler(crypto_currency_selected, pattern="^crypto_"))
    application.add_handler(CallbackQueryHandler(submit_payment_proof, pattern="^submit_payment_"))
    
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_deposit_amount))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_payment_proof))
    
    # ржкрзВрж░рзНржмрзЗрж░ рж╕ржорж╕рзНржд рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
    # ...
